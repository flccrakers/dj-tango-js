{"ast":null,"code":"module.exports = {\n  /**\n   * The relative brightness of any point in a colorspace, normalized to 0 for\n   * darkest black and 1 for lightest white. RGB colors only. Does not take\n   * into account alpha values.\n   *\n   * TODO:\n   * - Take into account alpha values.\n   * - Identify why there are minor discrepancies for some use cases\n   *   (i.e. #F0F & #FFF). Note that these cases rarely occur.\n   *\n   * Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n   */\n  _luminance: function _luminance(color) {\n    color = this._decomposeColor(color);\n\n    if (color.type.indexOf('rgb') > -1) {\n      var rgb = color.values.map(function (val) {\n        val /= 255; // normalized\n\n        return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n      });\n      return 0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2];\n    } else {\n      var message = 'Calculating the relative luminance is not available for ' + 'HSL and HSLA.';\n      console.error(message);\n      return -1;\n    }\n  },\n\n  /**\n   * @params:\n   * additionalValue = An extra value that has been calculated but not included\n   *                   with the original color object, such as an alpha value.\n   */\n  _convertColorToString: function _convertColorToString(color, additonalValue) {\n    var str = color.type + '(' + parseInt(color.values[0], 10) + ',' + parseInt(color.values[1], 10) + ',' + parseInt(color.values[2], 10);\n\n    if (additonalValue !== undefined) {\n      str += ',' + additonalValue + ')';\n    } else if (color.values.length === 4) {\n      str += ',' + color.values[3] + ')';\n    } else {\n      str += ')';\n    }\n\n    return str;\n  },\n  // Converts a color from hex format to rgb format.\n  _convertHexToRGB: function _convertHexToRGB(color) {\n    if (color.length === 4) {\n      var extendedColor = '#';\n\n      for (var i = 1; i < color.length; i++) {\n        extendedColor += color.charAt(i) + color.charAt(i);\n      }\n\n      color = extendedColor;\n    }\n\n    var values = {\n      r: parseInt(color.substr(1, 2), 16),\n      g: parseInt(color.substr(3, 2), 16),\n      b: parseInt(color.substr(5, 2), 16)\n    };\n    return 'rgb(' + values.r + ',' + values.g + ',' + values.b + ')';\n  },\n  // Returns the type and values of a color of any given type.\n  _decomposeColor: function _decomposeColor(color) {\n    if (color.charAt(0) === '#') {\n      return this._decomposeColor(this._convertHexToRGB(color));\n    }\n\n    var marker = color.indexOf('(');\n    var type = color.substring(0, marker);\n    var values = color.substring(marker + 1, color.length - 1).split(',');\n    return {\n      type: type,\n      values: values\n    };\n  },\n  // Set the absolute transparency of a color.\n  // Any existing alpha values are overwritten.\n  fade: function fade(color, amount) {\n    color = this._decomposeColor(color);\n    if (color.type === 'rgb' || color.type === 'hsl') color.type += 'a';\n    return this._convertColorToString(color, amount);\n  },\n  // Desaturates rgb and sets opacity to 0.15\n  lighten: function lighten(color, amount) {\n    color = this._decomposeColor(color);\n\n    if (color.type.indexOf('hsl') > -1) {\n      color.values[2] += amount;\n      return this._decomposeColor(this._convertColorToString(color));\n    } else if (color.type.indexOf('rgb') > -1) {\n      for (var i = 0; i < 3; i++) {\n        color.values[i] *= 1 + amount;\n        if (color.values[i] > 255) color.values[i] = 255;\n      }\n    }\n\n    if (color.type.indexOf('a') <= -1) color.type += 'a';\n    return this._convertColorToString(color, '0.15');\n  },\n  darken: function darken(color, amount) {\n    color = this._decomposeColor(color);\n\n    if (color.type.indexOf('hsl') > -1) {\n      color.values[2] += amount;\n      return this._decomposeColor(this._convertColorToString(color));\n    } else if (color.type.indexOf('rgb') > -1) {\n      for (var i = 0; i < 3; i++) {\n        color.values[i] *= 1 - amount;\n        if (color.values[i] < 0) color.values[i] = 0;\n      }\n    }\n\n    return this._convertColorToString(color);\n  },\n  // Calculates the contrast ratio between two colors.\n  //\n  // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n  contrastRatio: function contrastRatio(background, foreground) {\n    var lumA = this._luminance(background);\n\n    var lumB = this._luminance(foreground);\n\n    if (lumA >= lumB) {\n      return ((lumA + 0.05) / (lumB + 0.05)).toFixed(2);\n    } else {\n      return ((lumB + 0.05) / (lumA + 0.05)).toFixed(2);\n    }\n  },\n\n  /**\n   * Determines how readable a color combination is based on its level.\n   * Levels are defined from @LeaVerou:\n   * https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/contrast-ratio.js\n   */\n  contrastRatioLevel: function contrastRatioLevel(background, foreground) {\n    var levels = {\n      'fail': {\n        range: [0, 3],\n        color: 'hsl(0, 100%, 40%)'\n      },\n      'aa-large': {\n        range: [3, 4.5],\n        color: 'hsl(40, 100%, 45%)'\n      },\n      'aa': {\n        range: [4.5, 7],\n        color: 'hsl(80, 60%, 45%)'\n      },\n      'aaa': {\n        range: [7, 22],\n        color: 'hsl(95, 60%, 41%)'\n      }\n    };\n    var ratio = this.contrastRatio(background, foreground);\n\n    for (var level in levels) {\n      var range = levels[level].range;\n      if (ratio >= range[0] && ratio <= range[1]) return level;\n    }\n  }\n};","map":{"version":3,"sources":["/home/hoonakker/Dropbox/dvt/projet-JAVASCRIPT/react-tutos/dj-tango-js/IHM/src/services/color-manipulator.js"],"names":["module","exports","_luminance","color","_decomposeColor","type","indexOf","rgb","values","map","val","Math","pow","message","console","error","_convertColorToString","additonalValue","str","parseInt","undefined","length","_convertHexToRGB","extendedColor","i","charAt","r","substr","g","b","marker","substring","split","fade","amount","lighten","darken","contrastRatio","background","foreground","lumA","lumB","toFixed","contrastRatioLevel","levels","range","ratio","level"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB;AAEf;;;;;;;;;;;;AAYAC,EAAAA,UAde,sBAcJC,KAdI,EAcG;AAChBA,IAAAA,KAAK,GAAG,KAAKC,eAAL,CAAqBD,KAArB,CAAR;;AAEA,QAAIA,KAAK,CAACE,IAAN,CAAWC,OAAX,CAAmB,KAAnB,IAA4B,CAAC,CAAjC,EAAoC;AAClC,UAAIC,GAAG,GAAGJ,KAAK,CAACK,MAAN,CAAaC,GAAb,CAAiB,UAACC,GAAD,EAAS;AAClCA,QAAAA,GAAG,IAAI,GAAP,CADkC,CACtB;;AACZ,eAAOA,GAAG,IAAI,OAAP,GAAiBA,GAAG,GAAG,KAAvB,GAA+BC,IAAI,CAACC,GAAL,CAAS,CAACF,GAAG,GAAG,KAAP,IAAgB,KAAzB,EAAgC,GAAhC,CAAtC;AACD,OAHS,CAAV;AAKA,aAAO,SAASH,GAAG,CAAC,CAAD,CAAZ,GAAkB,SAASA,GAAG,CAAC,CAAD,CAA9B,GAAoC,SAASA,GAAG,CAAC,CAAD,CAAvD;AAED,KARD,MASK;AACH,UAAIM,OAAO,GAAG,6DACZ,eADF;AAEAC,MAAAA,OAAO,CAACC,KAAR,CAAcF,OAAd;AACA,aAAO,CAAC,CAAR;AACD;AACF,GAhCc;;AAkCf;;;;;AAKAG,EAAAA,qBAvCe,iCAuCOb,KAvCP,EAuCcc,cAvCd,EAuC8B;AAC3C,QAAIC,GAAG,GAAGf,KAAK,CAACE,IAAN,GAAa,GAAb,GACRc,QAAQ,CAAChB,KAAK,CAACK,MAAN,CAAa,CAAb,CAAD,EAAiB,EAAjB,CADA,GACuB,GADvB,GAERW,QAAQ,CAAChB,KAAK,CAACK,MAAN,CAAa,CAAb,CAAD,EAAiB,EAAjB,CAFA,GAEuB,GAFvB,GAGRW,QAAQ,CAAChB,KAAK,CAACK,MAAN,CAAa,CAAb,CAAD,EAAiB,EAAjB,CAHV;;AAKA,QAAIS,cAAc,KAAKG,SAAvB,EAAkC;AAChCF,MAAAA,GAAG,IAAI,MAAMD,cAAN,GAAuB,GAA9B;AACD,KAFD,MAGK,IAAId,KAAK,CAACK,MAAN,CAAaa,MAAb,KAAwB,CAA5B,EAA+B;AAClCH,MAAAA,GAAG,IAAI,MAAMf,KAAK,CAACK,MAAN,CAAa,CAAb,CAAN,GAAwB,GAA/B;AACD,KAFI,MAGA;AACHU,MAAAA,GAAG,IAAI,GAAP;AACD;;AAED,WAAOA,GAAP;AACD,GAxDc;AA0Df;AACAI,EAAAA,gBA3De,4BA2DEnB,KA3DF,EA2DS;AACtB,QAAIA,KAAK,CAACkB,MAAN,KAAiB,CAArB,EAAwB;AACtB,UAAIE,aAAa,GAAG,GAApB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,KAAK,CAACkB,MAA1B,EAAkCG,CAAC,EAAnC,EAAuC;AACrCD,QAAAA,aAAa,IAAIpB,KAAK,CAACsB,MAAN,CAAaD,CAAb,IAAkBrB,KAAK,CAACsB,MAAN,CAAaD,CAAb,CAAnC;AACD;;AACDrB,MAAAA,KAAK,GAAGoB,aAAR;AACD;;AAED,QAAIf,MAAM,GAAG;AACXkB,MAAAA,CAAC,EAAEP,QAAQ,CAAChB,KAAK,CAACwB,MAAN,CAAa,CAAb,EAAe,CAAf,CAAD,EAAoB,EAApB,CADA;AAEXC,MAAAA,CAAC,EAAET,QAAQ,CAAChB,KAAK,CAACwB,MAAN,CAAa,CAAb,EAAe,CAAf,CAAD,EAAoB,EAApB,CAFA;AAGXE,MAAAA,CAAC,EAAEV,QAAQ,CAAChB,KAAK,CAACwB,MAAN,CAAa,CAAb,EAAe,CAAf,CAAD,EAAoB,EAApB;AAHA,KAAb;AAMA,WAAO,SAASnB,MAAM,CAACkB,CAAhB,GAAoB,GAApB,GACLlB,MAAM,CAACoB,CADF,GACM,GADN,GAELpB,MAAM,CAACqB,CAFF,GAEM,GAFb;AAGD,GA7Ec;AA+Ef;AACAzB,EAAAA,eAhFe,2BAgFCD,KAhFD,EAgFQ;AACrB,QAAIA,KAAK,CAACsB,MAAN,CAAa,CAAb,MAAoB,GAAxB,EAA6B;AAC3B,aAAO,KAAKrB,eAAL,CAAqB,KAAKkB,gBAAL,CAAsBnB,KAAtB,CAArB,CAAP;AACD;;AAED,QAAI2B,MAAM,GAAG3B,KAAK,CAACG,OAAN,CAAc,GAAd,CAAb;AACA,QAAID,IAAI,GAAGF,KAAK,CAAC4B,SAAN,CAAgB,CAAhB,EAAmBD,MAAnB,CAAX;AACA,QAAItB,MAAM,GAAGL,KAAK,CAAC4B,SAAN,CAAgBD,MAAM,GAAG,CAAzB,EAA4B3B,KAAK,CAACkB,MAAN,GAAe,CAA3C,EAA8CW,KAA9C,CAAoD,GAApD,CAAb;AAEA,WAAO;AAAC3B,MAAAA,IAAI,EAAEA,IAAP;AAAaG,MAAAA,MAAM,EAAEA;AAArB,KAAP;AACD,GA1Fc;AA4Ff;AACA;AACAyB,EAAAA,IA9Fe,gBA8FV9B,KA9FU,EA8FH+B,MA9FG,EA8FK;AAClB/B,IAAAA,KAAK,GAAG,KAAKC,eAAL,CAAqBD,KAArB,CAAR;AACA,QAAIA,KAAK,CAACE,IAAN,KAAe,KAAf,IAAwBF,KAAK,CAACE,IAAN,KAAe,KAA3C,EAAkDF,KAAK,CAACE,IAAN,IAAc,GAAd;AAClD,WAAO,KAAKW,qBAAL,CAA2Bb,KAA3B,EAAkC+B,MAAlC,CAAP;AACD,GAlGc;AAoGf;AACAC,EAAAA,OArGe,mBAqGPhC,KArGO,EAqGA+B,MArGA,EAqGQ;AACrB/B,IAAAA,KAAK,GAAG,KAAKC,eAAL,CAAqBD,KAArB,CAAR;;AAEA,QAAIA,KAAK,CAACE,IAAN,CAAWC,OAAX,CAAmB,KAAnB,IAA4B,CAAC,CAAjC,EAAoC;AAClCH,MAAAA,KAAK,CAACK,MAAN,CAAa,CAAb,KAAmB0B,MAAnB;AACA,aAAO,KAAK9B,eAAL,CAAqB,KAAKY,qBAAL,CAA2Bb,KAA3B,CAArB,CAAP;AACD,KAHD,MAIK,IAAIA,KAAK,CAACE,IAAN,CAAWC,OAAX,CAAmB,KAAnB,IAA4B,CAAC,CAAjC,EAAoC;AACvC,WAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BrB,QAAAA,KAAK,CAACK,MAAN,CAAagB,CAAb,KAAmB,IAAIU,MAAvB;AACA,YAAI/B,KAAK,CAACK,MAAN,CAAagB,CAAb,IAAkB,GAAtB,EAA2BrB,KAAK,CAACK,MAAN,CAAagB,CAAb,IAAkB,GAAlB;AAC5B;AACF;;AAED,QAAIrB,KAAK,CAACE,IAAN,CAAWC,OAAX,CAAmB,GAAnB,KAA2B,CAAC,CAAhC,EAAmCH,KAAK,CAACE,IAAN,IAAc,GAAd;AAEnC,WAAO,KAAKW,qBAAL,CAA2Bb,KAA3B,EAAkC,MAAlC,CAAP;AACD,GAtHc;AAwHfiC,EAAAA,MAxHe,kBAwHRjC,KAxHQ,EAwHD+B,MAxHC,EAwHO;AACpB/B,IAAAA,KAAK,GAAG,KAAKC,eAAL,CAAqBD,KAArB,CAAR;;AAEA,QAAIA,KAAK,CAACE,IAAN,CAAWC,OAAX,CAAmB,KAAnB,IAA4B,CAAC,CAAjC,EAAoC;AAClCH,MAAAA,KAAK,CAACK,MAAN,CAAa,CAAb,KAAmB0B,MAAnB;AACA,aAAO,KAAK9B,eAAL,CAAqB,KAAKY,qBAAL,CAA2Bb,KAA3B,CAArB,CAAP;AACD,KAHD,MAIK,IAAIA,KAAK,CAACE,IAAN,CAAWC,OAAX,CAAmB,KAAnB,IAA4B,CAAC,CAAjC,EAAoC;AACvC,WAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BrB,QAAAA,KAAK,CAACK,MAAN,CAAagB,CAAb,KAAmB,IAAIU,MAAvB;AACA,YAAI/B,KAAK,CAACK,MAAN,CAAagB,CAAb,IAAkB,CAAtB,EAAyBrB,KAAK,CAACK,MAAN,CAAagB,CAAb,IAAkB,CAAlB;AAC1B;AACF;;AAED,WAAO,KAAKR,qBAAL,CAA2Bb,KAA3B,CAAP;AACD,GAvIc;AA0If;AACA;AACA;AACAkC,EAAAA,aA7Ie,yBA6IDC,UA7IC,EA6IWC,UA7IX,EA6IuB;AACpC,QAAIC,IAAI,GAAG,KAAKtC,UAAL,CAAgBoC,UAAhB,CAAX;;AACA,QAAIG,IAAI,GAAG,KAAKvC,UAAL,CAAgBqC,UAAhB,CAAX;;AAEA,QAAIC,IAAI,IAAIC,IAAZ,EAAkB;AAChB,aAAO,CAAC,CAACD,IAAI,GAAG,IAAR,KAAiBC,IAAI,GAAG,IAAxB,CAAD,EAAgCC,OAAhC,CAAwC,CAAxC,CAAP;AACD,KAFD,MAGK;AACH,aAAO,CAAC,CAACD,IAAI,GAAG,IAAR,KAAiBD,IAAI,GAAG,IAAxB,CAAD,EAAgCE,OAAhC,CAAwC,CAAxC,CAAP;AACD;AACF,GAvJc;;AAyJf;;;;;AAKAC,EAAAA,kBA9Je,8BA8JIL,UA9JJ,EA8JgBC,UA9JhB,EA8J4B;AACzC,QAAIK,MAAM,GAAG;AACX,cAAQ;AACNC,QAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,CADD;AAEN1C,QAAAA,KAAK,EAAE;AAFD,OADG;AAKX,kBAAY;AACV0C,QAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,GAAJ,CADG;AAEV1C,QAAAA,KAAK,EAAE;AAFG,OALD;AASX,YAAM;AACJ0C,QAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,CAAN,CADH;AAEJ1C,QAAAA,KAAK,EAAE;AAFH,OATK;AAaX,aAAO;AACL0C,QAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,EAAJ,CADF;AAEL1C,QAAAA,KAAK,EAAE;AAFF;AAbI,KAAb;AAmBA,QAAI2C,KAAK,GAAG,KAAKT,aAAL,CAAmBC,UAAnB,EAA+BC,UAA/B,CAAZ;;AAEA,SAAK,IAAIQ,KAAT,IAAkBH,MAAlB,EAA0B;AACxB,UAAIC,KAAK,GAAGD,MAAM,CAACG,KAAD,CAAN,CAAcF,KAA1B;AACA,UAAIC,KAAK,IAAID,KAAK,CAAC,CAAD,CAAd,IAAqBC,KAAK,IAAID,KAAK,CAAC,CAAD,CAAvC,EAA4C,OAAOE,KAAP;AAC7C;AACF;AAxLc,CAAjB","sourcesContent":["module.exports = {\n\n  /**\n   * The relative brightness of any point in a colorspace, normalized to 0 for\n   * darkest black and 1 for lightest white. RGB colors only. Does not take\n   * into account alpha values.\n   *\n   * TODO:\n   * - Take into account alpha values.\n   * - Identify why there are minor discrepancies for some use cases\n   *   (i.e. #F0F & #FFF). Note that these cases rarely occur.\n   *\n   * Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n   */\n  _luminance(color) {\n    color = this._decomposeColor(color);\n\n    if (color.type.indexOf('rgb') > -1) {\n      let rgb = color.values.map((val) => {\n        val /= 255; // normalized\n        return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n      });\n\n      return 0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2];\n\n    }\n    else {\n      let message = 'Calculating the relative luminance is not available for ' +\n        'HSL and HSLA.';\n      console.error(message);\n      return -1;\n    }\n  },\n\n  /**\n   * @params:\n   * additionalValue = An extra value that has been calculated but not included\n   *                   with the original color object, such as an alpha value.\n   */\n  _convertColorToString(color, additonalValue) {\n    let str = color.type + '(' +\n      parseInt(color.values[0],10) + ',' +\n      parseInt(color.values[1],10) + ',' +\n      parseInt(color.values[2],10);\n\n    if (additonalValue !== undefined) {\n      str += ',' + additonalValue + ')';\n    }\n    else if (color.values.length === 4) {\n      str += ',' + color.values[3] + ')';\n    }\n    else {\n      str += ')';\n    }\n\n    return str;\n  },\n\n  // Converts a color from hex format to rgb format.\n  _convertHexToRGB(color) {\n    if (color.length === 4) {\n      let extendedColor = '#';\n      for (let i = 1; i < color.length; i++) {\n        extendedColor += color.charAt(i) + color.charAt(i);\n      }\n      color = extendedColor;\n    }\n\n    let values = {\n      r:\tparseInt(color.substr(1,2), 16),\n      g:\tparseInt(color.substr(3,2), 16),\n      b:\tparseInt(color.substr(5,2), 16),\n    };\n\n    return 'rgb(' + values.r + ',' +\n      values.g + ',' +\n      values.b + ')';\n  },\n\n  // Returns the type and values of a color of any given type.\n  _decomposeColor(color) {\n    if (color.charAt(0) === '#') {\n      return this._decomposeColor(this._convertHexToRGB(color));\n    }\n\n    let marker = color.indexOf('(');\n    let type = color.substring(0, marker);\n    let values = color.substring(marker + 1, color.length - 1).split(',');\n\n    return {type: type, values: values};\n  },\n\n  // Set the absolute transparency of a color.\n  // Any existing alpha values are overwritten.\n  fade(color, amount) {\n    color = this._decomposeColor(color);\n    if (color.type === 'rgb' || color.type === 'hsl') color.type += 'a';\n    return this._convertColorToString(color, amount);\n  },\n\n  // Desaturates rgb and sets opacity to 0.15\n  lighten(color, amount) {\n    color = this._decomposeColor(color);\n\n    if (color.type.indexOf('hsl') > -1) {\n      color.values[2] += amount;\n      return this._decomposeColor(this._convertColorToString(color));\n    }\n    else if (color.type.indexOf('rgb') > -1) {\n      for (let i = 0; i < 3; i++) {\n        color.values[i] *= 1 + amount;\n        if (color.values[i] > 255) color.values[i] = 255;\n      }\n    }\n\n    if (color.type.indexOf('a') <= -1) color.type += 'a';\n\n    return this._convertColorToString(color, '0.15');\n  },\n\n  darken(color, amount) {\n    color = this._decomposeColor(color);\n\n    if (color.type.indexOf('hsl') > -1) {\n      color.values[2] += amount;\n      return this._decomposeColor(this._convertColorToString(color));\n    }\n    else if (color.type.indexOf('rgb') > -1) {\n      for (let i = 0; i < 3; i++) {\n        color.values[i] *= 1 - amount;\n        if (color.values[i] < 0) color.values[i] = 0;\n      }\n    }\n\n    return this._convertColorToString(color);\n  },\n\n\n  // Calculates the contrast ratio between two colors.\n  //\n  // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n  contrastRatio(background, foreground) {\n    let lumA = this._luminance(background);\n    let lumB = this._luminance(foreground);\n\n    if (lumA >= lumB) {\n      return ((lumA + 0.05) / (lumB + 0.05)).toFixed(2);\n    }\n    else {\n      return ((lumB + 0.05) / (lumA + 0.05)).toFixed(2);\n    }\n  },\n\n  /**\n   * Determines how readable a color combination is based on its level.\n   * Levels are defined from @LeaVerou:\n   * https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/contrast-ratio.js\n   */\n  contrastRatioLevel(background, foreground) {\n    let levels = {\n      'fail': {\n        range: [0, 3],\n        color: 'hsl(0, 100%, 40%)',\n      },\n      'aa-large': {\n        range: [3, 4.5],\n        color: 'hsl(40, 100%, 45%)',\n      },\n      'aa': {\n        range: [4.5, 7],\n        color: 'hsl(80, 60%, 45%)',\n      },\n      'aaa': {\n        range: [7, 22],\n        color: 'hsl(95, 60%, 41%)',\n      },\n    };\n\n    let ratio = this.contrastRatio(background, foreground);\n\n    for (let level in levels) {\n      let range = levels[level].range;\n      if (ratio >= range[0] && ratio <= range[1]) return level;\n    }\n  },\n};\n"]},"metadata":{},"sourceType":"module"}