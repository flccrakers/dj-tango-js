{"ast":null,"code":"import _classCallCheck from \"/home/hoonakker/Dropbox/dvt/projet-JAVASCRIPT/react-tutos/dj-tango-js/IHM/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hoonakker/Dropbox/dvt/projet-JAVASCRIPT/react-tutos/dj-tango-js/IHM/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/hoonakker/Dropbox/dvt/projet-JAVASCRIPT/react-tutos/dj-tango-js/IHM/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/hoonakker/Dropbox/dvt/projet-JAVASCRIPT/react-tutos/dj-tango-js/IHM/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/hoonakker/Dropbox/dvt/projet-JAVASCRIPT/react-tutos/dj-tango-js/IHM/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/hoonakker/Dropbox/dvt/projet-JAVASCRIPT/react-tutos/dj-tango-js/IHM/src/components/dialogs/import-database-dialog.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport * as dialogActions from \"../../redux/actions/dialogActions\";\nimport Button from \"@material-ui/core/Button\";\nimport { getTranslate } from '../locales/localeUtils';\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport TextField from \"@material-ui/core/TextField\";\nvar styles = {\n  input: {\n    opacity: \"0\",\n    width: \"0px\",\n    height: \"0px\"\n  },\n  selectFileBloc: {\n    display: 'flex',\n    flex: '1 1 auto',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: '15px'\n  }\n};\n\nvar ImportDataBaseDialog =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ImportDataBaseDialog, _Component);\n\n  function ImportDataBaseDialog(props) {\n    var _this;\n\n    _classCallCheck(this, ImportDataBaseDialog);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ImportDataBaseDialog).call(this, props));\n\n    _this.handleChange = function (name) {\n      return function (event) {\n        var file = _this.state.databaseFile;\n\n        if (file === undefined) {\n          file = {\n            name: event.target.value\n          };\n        } else {\n          file.name = event.target.value;\n        }\n\n        _this.setState({\n          databaseFile: file\n        });\n      };\n    };\n\n    _this.handleSelectFile = function (event) {\n      // console.log(\"CHANGING FILE\");\n      // this.setState({databaseFile: event.target.files[0]});\n      _this.setState({\n        databaseFile: event.target.files[0],\n        name: event.target.files[0].name\n      });\n    };\n\n    _this.handleImportDataBase = function () {\n      // console.log(this.state.databaseFile);\n      _this.setState({\n        databaseFile: {\n          name: 'TA MÈRE !'\n        }\n      });\n    };\n\n    _this.handleCloseDialog = function () {\n      _this.props.dispatch(dialogActions.closeDialog());\n    };\n\n    _this.state = {\n      databaseFile: undefined,\n      name: 'Cat in the Hat'\n    };\n    return _this;\n  }\n\n  _createClass(ImportDataBaseDialog, [{\n    key: \"getContentText\",\n    value: function getContentText() {\n      return getTranslate(this.props.locale)('IMPORT_DATABASE_TEXT');\n    }\n  }, {\n    key: \"getContent\",\n    value: function getContent() {\n      console.log(this.state.databaseFile);\n      var textValue = this.state.databaseFile === undefined ? '' : this.state.databaseFile.name;\n      console.log(textValue);\n      return React.createElement(\"div\", {\n        style: styles.selectFileBloc,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        value: textValue,\n        onChange: this.handleChange('name'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        // accept=\"text/csv\"\n        style: styles.input,\n        id: \"raised-button-file\",\n        type: \"file\",\n        onChange: this.handleSelectFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"raised-button-file\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: 'text',\n        component: \"span\",\n        color: 'secondary',\n        style: {\n          marginLeft: '25px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Select File\")));\n    }\n  }, {\n    key: \"getActions\",\n    value: function getActions() {\n      var translate = getTranslate(this.props.locale);\n      return [React.createElement(Button, {\n        key: 'cancel_button',\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: this.handleCloseDialog,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, translate('CANCEL')), React.createElement(Button, {\n        key: 'import_button',\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: this.handleImportDataBase,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, translate('IMPORT_DATABASE_BUTTON'))];\n    }\n  }, {\n    key: \"getTitle\",\n    value: function getTitle() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, getTranslate(this.props.locale)('IMPORT_DATABASE'));\n    }\n    /******************************************************/\n\n    /*Fixed part of the dialog, don't touch that          */\n\n    /******************************************************/\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var dialog = this.props.dialog; // console.log(this.state.databaseFile);\n\n      return React.createElement(Dialog, {\n        open: dialog.open,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(DialogTitle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, this.getTitle()), React.createElement(DialogContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(DialogContentText, {\n        style: {\n          whiteSpace: 'pre-wrap'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, this.getContentText()), this.getContent()), React.createElement(DialogActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, this.getActions()));\n    }\n  }]);\n\n  return ImportDataBaseDialog;\n}(Component);\n\nexport default connect(function (store) {\n  return {\n    dialog: store.dialog,\n    locale: store.locale\n  };\n})(ImportDataBaseDialog);","map":{"version":3,"sources":["/home/hoonakker/Dropbox/dvt/projet-JAVASCRIPT/react-tutos/dj-tango-js/IHM/src/components/dialogs/import-database-dialog.js"],"names":["React","Component","connect","Dialog","DialogActions","DialogContent","DialogTitle","dialogActions","Button","getTranslate","DialogContentText","TextField","styles","input","opacity","width","height","selectFileBloc","display","flex","justifyContent","alignItems","marginTop","ImportDataBaseDialog","props","handleChange","name","event","file","state","databaseFile","undefined","target","value","setState","handleSelectFile","files","handleImportDataBase","handleCloseDialog","dispatch","closeDialog","locale","console","log","textValue","marginLeft","translate","dialog","open","getTitle","whiteSpace","getContentText","getContent","getActions","store"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport * as dialogActions from \"../../redux/actions/dialogActions\";\nimport Button from \"@material-ui/core/Button\";\nimport {getTranslate} from '../locales/localeUtils';\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst styles = {\n  input: {\n    opacity: \"0\",\n    width: \"0px\",\n    height: \"0px\"\n  },\n  selectFileBloc: {\n    display: 'flex',\n    flex: '1 1 auto',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: '15px',\n  }\n};\n\nclass ImportDataBaseDialog extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      databaseFile: undefined,\n      name: 'Cat in the Hat',\n    }\n  }\n\n\n  getContentText() {\n    return getTranslate(this.props.locale)('IMPORT_DATABASE_TEXT');\n  };\n\n  handleChange = name => event => {\n    let file = this.state.databaseFile;\n    if (file === undefined) {\n      file = {name: event.target.value}\n    } else {\n      file.name = event.target.value;\n    }\n    this.setState({databaseFile: file});\n  };\n\n  getContent() {\n    console.log(this.state.databaseFile);\n    let textValue = this.state.databaseFile === undefined ? '' : this.state.databaseFile.name;\n\n    console.log(textValue);\n    return (\n      <div style={styles.selectFileBloc}>\n        <TextField value={textValue}\n                   onChange={this.handleChange('name')}/>\n        <input\n          // accept=\"text/csv\"\n          style={styles.input}\n          id=\"raised-button-file\"\n          type=\"file\"\n          onChange={this.handleSelectFile}\n        />\n        <label htmlFor=\"raised-button-file\">\n          <Button variant={'text'} component=\"span\" color={'secondary'} style={{marginLeft: '25px'}}>\n            Select File\n          </Button>\n        </label>\n      </div>\n    );\n  }\n\n  handleSelectFile = event => {\n    // console.log(\"CHANGING FILE\");\n    // this.setState({databaseFile: event.target.files[0]});\n    this.setState({databaseFile: event.target.files[0], name: event.target.files[0].name});\n  };\n\n  getActions() {\n    let translate = getTranslate(this.props.locale);\n    return [\n      <Button\n        key={'cancel_button'}\n        variant=\"contained\"\n        color=\"secondary\"\n        onClick={this.handleCloseDialog}>\n        {translate('CANCEL')}\n      </Button>,\n      <Button\n        key={'import_button'}\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={this.handleImportDataBase}>\n\n        {translate('IMPORT_DATABASE_BUTTON')}\n      </Button>,\n    ];\n  }\n\n  handleImportDataBase = () => {\n    // console.log(this.state.databaseFile);\n    this.setState({databaseFile: {name: 'TA MÈRE !'}})\n  };\n\n  getTitle() {\n    return (<div>{getTranslate(this.props.locale)('IMPORT_DATABASE')}</div>);\n  }\n\n\n  /******************************************************/\n  /*Fixed part of the dialog, don't touch that          */\n  /******************************************************/\n  handleCloseDialog = () => {\n    this.props.dispatch(dialogActions.closeDialog());\n  };\n\n  render() {\n    let dialog: dialogReducerDTO = this.props.dialog;\n    // console.log(this.state.databaseFile);\n\n    return (\n      <Dialog open={dialog.open}>\n        <DialogTitle>{this.getTitle()}</DialogTitle>\n        <DialogContent>\n          <DialogContentText style={{whiteSpace: 'pre-wrap'}}>\n            {this.getContentText()}\n          </DialogContentText>\n          {this.getContent()}\n        </DialogContent>\n        <DialogActions>\n          {this.getActions()}\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nexport default connect(store => {\n  return {\n    dialog: store.dialog,\n    locale: store.locale,\n  };\n})(ImportDataBaseDialog);\n\n"]},"metadata":{},"sourceType":"module"}