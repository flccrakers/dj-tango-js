{"ast":null,"code":"/**\n * Get the table of size for each column\n * @returns {*[] | *}\n */\nexport function getSizedRows(rowsTemplate, containerWidth) {\n  var ret,\n      autoSize = 0;\n  ret = rowsTemplate.map(function (a) {\n    return Object.assign({}, a);\n  });\n\n  if (!isNaN(containerWidth)) {\n    autoSize = getAutoSize(rowsTemplate, containerWidth);\n  }\n\n  ret.forEach(function (elmt, index, table) {\n    if (elmt.size === 'auto' || elmt.size === 0) {\n      table[index].size = autoSize;\n    }\n  });\n  return ret;\n}\n/**\n * Calculate the size of columns labelled 'auto'\n * @param containerSize size of the container in which the table is in (a div for example)\n * @returns {number} the size of column labeled 'auto'\n */\n\nfunction getAutoSize(rowsTemplate, containerSize) {\n  var autoNb = 0;\n  var totalSize = 0;\n  var margin = rowsTemplate.length * 4 + 30;\n  rowsTemplate.forEach(function (element) {\n    // console.log(element);\n    if (element.size === 'auto' || element.size === 0) {\n      autoNb += 1;\n    } else {\n      totalSize += element.size;\n    }\n  });\n  return (containerSize - totalSize - margin) / autoNb;\n}\n\nexport function getTangoListFromIdList(selectedTangosList, displayedTangos) {\n  var ret = [];\n  selectedTangosList.forEach(function (id) {\n    ret.push(displayedTangos[id]);\n  });\n  return ret;\n}\nexport function calculateWidthAndHeightOfMilongaListAndSource() {\n  var milongaSizeRef, sourceSizeRef, sourceSize, milongaSize;\n  milongaSizeRef = document.getElementById('milongaVirtualList');\n  sourceSizeRef = document.getElementById('sourceVirtualList');\n  sourceSize = {\n    width: sourceSizeRef.clientWidth,\n    height: sourceSizeRef.clientHeight\n  };\n  milongaSize = {\n    width: milongaSizeRef.clientWidth,\n    height: milongaSizeRef.clientHeight\n  };\n  return {\n    sourceSize: sourceSize,\n    milongaSize: milongaSize\n  };\n}","map":{"version":3,"sources":["/home/hoonakker/Dropbox/dvt/projet-JAVASCRIPT/react-tutos/dj-tango-js/IHM/src/components/dj-utils.js"],"names":["getSizedRows","rowsTemplate","containerWidth","ret","autoSize","map","a","Object","assign","isNaN","getAutoSize","forEach","elmt","index","table","size","containerSize","autoNb","totalSize","margin","length","element","getTangoListFromIdList","selectedTangosList","displayedTangos","id","push","calculateWidthAndHeightOfMilongaListAndSource","milongaSizeRef","sourceSizeRef","sourceSize","milongaSize","document","getElementById","width","clientWidth","height","clientHeight"],"mappings":"AAAA;;;;AAIA,OAAO,SAASA,YAAT,CAAsBC,YAAtB,EAAoCC,cAApC,EAAoD;AACzD,MAAIC,GAAJ;AAAA,MAASC,QAAQ,GAAG,CAApB;AACAD,EAAAA,GAAG,GAAGF,YAAY,CAACI,GAAb,CAAiB,UAAAC,CAAC;AAAA,WAAIC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,CAAlB,CAAJ;AAAA,GAAlB,CAAN;;AACA,MAAI,CAACG,KAAK,CAACP,cAAD,CAAV,EAA4B;AAC1BE,IAAAA,QAAQ,GAAGM,WAAW,CAACT,YAAD,EAAeC,cAAf,CAAtB;AACD;;AACDC,EAAAA,GAAG,CAACQ,OAAJ,CAAY,UAACC,IAAD,EAAOC,KAAP,EAAcC,KAAd,EAAwB;AAClC,QAAIF,IAAI,CAACG,IAAL,KAAc,MAAd,IAAwBH,IAAI,CAACG,IAAL,KAAc,CAA1C,EAA6C;AAC3CD,MAAAA,KAAK,CAACD,KAAD,CAAL,CAAaE,IAAb,GAAoBX,QAApB;AACD;AACF,GAJD;AAKA,SAAOD,GAAP;AACD;AAED;;;;;;AAKA,SAASO,WAAT,CAAqBT,YAArB,EAAmCe,aAAnC,EAAkD;AAChD,MAAIC,MAAM,GAAG,CAAb;AACA,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,MAAM,GAAGlB,YAAY,CAACmB,MAAb,GAAsB,CAAtB,GAA0B,EAAvC;AACAnB,EAAAA,YAAY,CAACU,OAAb,CAAqB,UAAAU,OAAO,EAAI;AAC9B;AACA,QAAIA,OAAO,CAACN,IAAR,KAAiB,MAAjB,IAA2BM,OAAO,CAACN,IAAR,KAAiB,CAAhD,EAAmD;AACjDE,MAAAA,MAAM,IAAI,CAAV;AACD,KAFD,MAEO;AACLC,MAAAA,SAAS,IAAIG,OAAO,CAACN,IAArB;AACD;AACF,GAPD;AAQA,SAAO,CAACC,aAAa,GAAGE,SAAhB,GAA4BC,MAA7B,IAAuCF,MAA9C;AACD;;AAGD,OAAO,SAASK,sBAAT,CAAgCC,kBAAhC,EAAoDC,eAApD,EAAqE;AAC1E,MAAIrB,GAAG,GAAG,EAAV;AACAoB,EAAAA,kBAAkB,CAACZ,OAAnB,CAA2B,UAACc,EAAD,EAAQ;AACjCtB,IAAAA,GAAG,CAACuB,IAAJ,CAASF,eAAe,CAACC,EAAD,CAAxB;AACD,GAFD;AAIA,SAAOtB,GAAP;AACD;AAED,OAAO,SAASwB,6CAAT,GAAyD;AAC9D,MAAIC,cAAJ,EAAoBC,aAApB,EAAmCC,UAAnC,EAAwDC,WAAxD;AACAH,EAAAA,cAAc,GAAGI,QAAQ,CAACC,cAAT,CAAwB,oBAAxB,CAAjB;AACAJ,EAAAA,aAAa,GAAGG,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,CAAhB;AACAH,EAAAA,UAAU,GAAG;AAACI,IAAAA,KAAK,EAAEL,aAAa,CAACM,WAAtB;AAAmCC,IAAAA,MAAM,EAAEP,aAAa,CAACQ;AAAzD,GAAb;AACAN,EAAAA,WAAW,GAAG;AAACG,IAAAA,KAAK,EAAEN,cAAc,CAACO,WAAvB;AAAoCC,IAAAA,MAAM,EAAER,cAAc,CAACS;AAA3D,GAAd;AAEA,SAAO;AAACP,IAAAA,UAAU,EAAVA,UAAD;AAAaC,IAAAA,WAAW,EAAXA;AAAb,GAAP;AAED","sourcesContent":["/**\n * Get the table of size for each column\n * @returns {*[] | *}\n */\nexport function getSizedRows(rowsTemplate, containerWidth) {\n  let ret, autoSize = 0;\n  ret = rowsTemplate.map(a => Object.assign({}, a));\n  if (!isNaN(containerWidth)) {\n    autoSize = getAutoSize(rowsTemplate, containerWidth);\n  }\n  ret.forEach((elmt, index, table) => {\n    if (elmt.size === 'auto' || elmt.size === 0) {\n      table[index].size = autoSize\n    }\n  });\n  return ret;\n}\n\n/**\n * Calculate the size of columns labelled 'auto'\n * @param containerSize size of the container in which the table is in (a div for example)\n * @returns {number} the size of column labeled 'auto'\n */\nfunction getAutoSize(rowsTemplate, containerSize) {\n  let autoNb = 0;\n  let totalSize = 0;\n  let margin = rowsTemplate.length * 4 + 30;\n  rowsTemplate.forEach(element => {\n    // console.log(element);\n    if (element.size === 'auto' || element.size === 0) {\n      autoNb += 1;\n    } else {\n      totalSize += element.size\n    }\n  });\n  return (containerSize - totalSize - margin) / autoNb;\n}\n\n\nexport function getTangoListFromIdList(selectedTangosList, displayedTangos) {\n  let ret = [];\n  selectedTangosList.forEach((id) => {\n    ret.push(displayedTangos[id]);\n  });\n\n  return ret;\n}\n\nexport function calculateWidthAndHeightOfMilongaListAndSource() {\n  let milongaSizeRef, sourceSizeRef, sourceSize: sizeDTO, milongaSize: sizeDTO;\n  milongaSizeRef = document.getElementById('milongaVirtualList');\n  sourceSizeRef = document.getElementById('sourceVirtualList');\n  sourceSize = {width: sourceSizeRef.clientWidth, height: sourceSizeRef.clientHeight};\n  milongaSize = {width: milongaSizeRef.clientWidth, height: milongaSizeRef.clientHeight};\n\n  return {sourceSize, milongaSize}\n\n}"]},"metadata":{},"sourceType":"module"}