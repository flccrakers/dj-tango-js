{"ast":null,"code":"import { applyMiddleware, createStore, compose } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport promise from 'redux-promise-middleware';\nimport reducer from \"./redux/reducers\";\nimport localForage from \"localforage\";\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // const middleware = applyMiddleware(promise(), thunk, createLogger());\n//const locales = localeReducer(\"en\", loc).default;\n// let store = createStore(reducer, middleware);\n// persistStore(store, {storage:localForage});\n\nvar persistConfig = {\n  key: 'root',\n  storage: storage\n};\nvar persistedReducer = persistReducer(persistConfig, rootReducer);\nexport default store;","map":{"version":3,"sources":["/home/hoonakker/Dropbox/dvt/projet-JAVASCRIPT/react-tutos/dj-tango-js/IHM/src/store.js"],"names":["applyMiddleware","createStore","compose","createLogger","thunk","promise","reducer","localForage","persistStore","persistReducer","storage","persistConfig","key","persistedReducer","rootReducer","store"],"mappings":"AAAA,SAAQA,eAAR,EAAyBC,WAAzB,EAAsCC,OAAtC,QAAoD,OAApD;AACA,SAAQC,YAAR,QAA2B,cAA3B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB,C,CAEA;AACA;AACA;AACA;;AACA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,MADe;AAEpBF,EAAAA,OAAO,EAAPA;AAFoB,CAAtB;AAIA,IAAMG,gBAAgB,GAAGJ,cAAc,CAACE,aAAD,EAAgBG,WAAhB,CAAvC;AAEA,eAAeC,KAAf","sourcesContent":["import {applyMiddleware, createStore, compose} from 'redux'\nimport {createLogger} from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport promise from 'redux-promise-middleware';\nimport reducer from \"./redux/reducers\";\nimport localForage from \"localforage\";\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\n// const middleware = applyMiddleware(promise(), thunk, createLogger());\n//const locales = localeReducer(\"en\", loc).default;\n// let store = createStore(reducer, middleware);\n// persistStore(store, {storage:localForage});\nconst persistConfig = {\n  key: 'root',\n  storage,\n}\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}