{"ast":null,"code":"import * as tangoManager from './tangoDataManagement';\nimport * as menuActions from '../redux/actions/menuActions';\nexport function importTangosFromCsvFile(csvFile, dispatch) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader(); // reader.onLoad = importTangoCSVFile(this, resolve);\n\n    reader.onload = function (progressEvent) {\n      importTangoCSVFile(this.result.split(\"\\n\"), resolve, dispatch);\n    };\n\n    reader.readAsText(csvFile);\n  });\n}\n\nfunction importTangoCSVFile(lines, resolve, dispatch) {\n  console.log(\"I'm importing file\");\n  lines.forEach(function (line, index, table) {\n    if (index > 0) {\n      line = line.split(','); //title, artist, album, type, year, bpmHuman, bpmFromFile, duration, path, tstart, tend,author, singer, composer, ID\n\n      var tango = {};\n      tango.title = line[0];\n      tango.artist = line[1];\n      tango.album = line[2];\n      tango.genre = line[3];\n      tango.year = line[4];\n      tango.bpmHuman = line[5];\n      tango.bpmFromFile = line[6];\n      tango.duration = line[7];\n      tango.path = line[8];\n      tango.start = line[9];\n      tango.end = line[10];\n      tango.author = line[11];\n      tango.singer = line[12];\n      tango.composer = line[13];\n      tango.id = line[14];\n      tango.fileSize = line[15];\n      tangoManager.addTango(tango).then(function () {\n        var remained = (index + 1) % 100;\n\n        if (remained === 0 || index + 1 === table.length) {\n          console.log((index + 1) / lines.length * 100);\n          dispatch(menuActions.updatePercentImport((index + 1) / table.length * 100));\n        }\n\n        if (index + 1 === table.length) {\n          resolve();\n        }\n      });\n    }\n  });\n}","map":{"version":3,"sources":["/home/hoonakker/Dropbox/dvt/projet-JAVASCRIPT/react-tutos/dj-tango-js/IHM/src/services/import-export.js"],"names":["tangoManager","menuActions","importTangosFromCsvFile","csvFile","dispatch","Promise","resolve","reject","reader","FileReader","onload","progressEvent","importTangoCSVFile","result","split","readAsText","lines","console","log","forEach","line","index","table","tango","title","artist","album","genre","year","bpmHuman","bpmFromFile","duration","path","start","end","author","singer","composer","id","fileSize","addTango","then","remained","length","updatePercentImport"],"mappings":"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","sourcesContent":["import * as tangoManager from './tangoDataManagement';\nimport * as menuActions from '../redux/actions/menuActions';\n\nexport function importTangosFromCsvFile(csvFile, dispatch) {\n  return new Promise((resolve, reject) => {\n    let reader = new FileReader();\n    // reader.onLoad = importTangoCSVFile(this, resolve);\n    reader.onload = function (progressEvent) {\n      importTangoCSVFile(this.result.split(\"\\n\"), resolve, dispatch);\n    };\n    reader.readAsText(csvFile);\n\n  });\n}\n\nfunction importTangoCSVFile(lines, resolve, dispatch) {\n  console.log(\"I'm importing file\");\n  lines.forEach((line, index, table) => {\n    if (index > 0) {\n      line = line.split(',');\n      //title, artist, album, type, year, bpmHuman, bpmFromFile, duration, path, tstart, tend,author, singer, composer, ID\n      let tango: tangoDTO = {};\n      tango.title = line[0];\n      tango.artist = line[1];\n      tango.album = line[2];\n      tango.genre = line[3];\n      tango.year = line[4];\n      tango.bpmHuman = line[5];\n      tango.bpmFromFile = line[6];\n      tango.duration = line[7];\n      tango.path = line[8];\n      tango.start = line[9];\n      tango.end = line[10];\n      tango.author = line[11];\n      tango.singer = line[12];\n      tango.composer = line[13];\n      tango.id = line[14];\n      tango.fileSize=line[15];\n\n      tangoManager.addTango(tango).then(() => {\n        let remained = (index + 1) % 100;\n        if (remained === 0 || index + 1 === table.length) {\n          console.log((index + 1) / lines.length*100);\n          dispatch(menuActions.updatePercentImport((index + 1) / table.length * 100));\n        }\n        if (index + 1 === table.length) {\n          resolve();\n        }\n      });\n    }\n\n\n\n  });\n\n}"]},"metadata":{},"sourceType":"module"}