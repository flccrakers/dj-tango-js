{"ast":null,"code":"import _classCallCheck from \"/home/hoonakker/Dropbox/dvt/projet-JAVASCRIPT/react-tutos/dj-tango-js/IHM/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hoonakker/Dropbox/dvt/projet-JAVASCRIPT/react-tutos/dj-tango-js/IHM/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/hoonakker/Dropbox/dvt/projet-JAVASCRIPT/react-tutos/dj-tango-js/IHM/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/hoonakker/Dropbox/dvt/projet-JAVASCRIPT/react-tutos/dj-tango-js/IHM/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/hoonakker/Dropbox/dvt/projet-JAVASCRIPT/react-tutos/dj-tango-js/IHM/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/hoonakker/Dropbox/dvt/projet-JAVASCRIPT/react-tutos/dj-tango-js/IHM/src/components/dialogs/preferences-dialog.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport * as dialogActions from \"../../redux/actions/dialogActions\";\nimport Button from \"@material-ui/core/Button\";\nimport { getTranslate } from '../locales/localeUtils';\nimport TextField from \"@material-ui/core/TextField\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Info from \"@material-ui/icons/Info\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nvar styles = {\n  input: {\n    opacity: \"0\",\n    width: \"0px\",\n    height: \"0px\"\n  },\n  selectFileBloc: {\n    display: 'flex',\n    flex: '1 1 auto',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: '15px'\n  }\n};\n\nvar templateClassName =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(templateClassName, _Component);\n\n  function templateClassName() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, templateClassName);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(templateClassName)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      arrowRef: null\n    };\n\n    _this.handleArrowRef = function (node) {\n      _this.setState({\n        arrowRef: node\n      });\n    };\n\n    _this.handleCloseDialog = function () {\n      _this.props.dispatch(dialogActions.closeDialog());\n    };\n\n    return _this;\n  }\n\n  _createClass(templateClassName, [{\n    key: \"getContent\",\n    value: function getContent() {\n      var preferences,\n          ret = [];\n      preferences = this.props.preferences;\n      ret.push(this.getBaseDir(preferences));\n      return ret;\n    }\n  }, {\n    key: \"getBaseDir\",\n    value: function getBaseDir(preferences) {\n      var translate = getTranslate(this.props.locale);\n      return React.createElement(\"div\", {\n        key: 'preferences_baseDir',\n        style: {\n          display: 'flex',\n          flex: '1 1 auto',\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        autoFocus: true,\n        value: preferences.baseDir,\n        label: translate('PREFERENCES.BASE_DIRECTORY'),\n        onChange: this.updateBaseDir,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }), React.createElement(Tooltip, {\n        title: this.getTooltipText(),\n        PopperProps: {\n          popperOptions: {\n            modifiers: {\n              arrow: {\n                enabled: Boolean(this.state.arrowRef),\n                element: this.state.arrowRef\n              }\n            }\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        variant: 'text',\n        color: 'secondary',\n        style: {\n          marginLeft: '25px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(Info, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }))));\n    }\n  }, {\n    key: \"getTooltipText\",\n    value: function getTooltipText() {\n      var translate = getTranslate(this.props.locale);\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, translate('PREFERENCES.TOOLTIP_BASE_DIR'), React.createElement(\"span\", {\n        className: classes.arrow,\n        ref: this.handleArrowRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"getActions\",\n    value: function getActions() {\n      var translate = getTranslate(this.props.locale);\n      return [React.createElement(Button, {\n        key: 'closeButton',\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: this.handleCloseDialog,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, translate('CLOSE'))];\n    }\n  }, {\n    key: \"getTitle\",\n    value: function getTitle() {\n      return getTranslate(this.props.locale)('MENU.PREFERENCES');\n    }\n    /******************************************************/\n\n    /*Fixed part of the dialog, don't touch that          */\n\n    /******************************************************/\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var dialog = this.props.dialog;\n      return React.createElement(Dialog, {\n        open: dialog.open,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(DialogTitle, {\n        id: dialog.dialogTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, this.getTitle()), React.createElement(DialogContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, this.getContent()), React.createElement(DialogActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, this.getActions()));\n    }\n  }]);\n\n  return templateClassName;\n}(Component);\n\nexport default connect(function (store) {\n  return {\n    dialog: store.dialog,\n    locale: store.locale,\n    preferences: store.preferences\n  };\n})(templateClassName);","map":{"version":3,"sources":["/home/hoonakker/Dropbox/dvt/projet-JAVASCRIPT/react-tutos/dj-tango-js/IHM/src/components/dialogs/preferences-dialog.js"],"names":["React","Component","connect","Dialog","DialogActions","DialogContent","DialogTitle","dialogActions","Button","getTranslate","TextField","IconButton","Info","Tooltip","styles","input","opacity","width","height","selectFileBloc","display","flex","justifyContent","alignItems","marginTop","templateClassName","state","arrowRef","handleArrowRef","node","setState","handleCloseDialog","props","dispatch","closeDialog","preferences","ret","push","getBaseDir","translate","locale","baseDir","updateBaseDir","getTooltipText","popperOptions","modifiers","arrow","enabled","Boolean","element","marginLeft","classes","dialog","open","dialogTitle","getTitle","getContent","getActions","store"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport * as dialogActions from \"../../redux/actions/dialogActions\";\nimport Button from \"@material-ui/core/Button\";\nimport {getTranslate} from '../locales/localeUtils';\nimport TextField from \"@material-ui/core/TextField\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Info from \"@material-ui/icons/Info\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nconst styles = {\n  input: {\n    opacity: \"0\",\n    width: \"0px\",\n    height: \"0px\"\n  },\n  selectFileBloc: {\n    display: 'flex',\n    flex: '1 1 auto',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: '15px',\n  }\n};\n\nclass templateClassName extends Component {\n\n  state = {\n    arrowRef: null,\n  };\n\n\n  getContent() {\n    let preferences: preferencesDTO, ret = [];\n    preferences = this.props.preferences;\n    ret.push(this.getBaseDir(preferences));\n\n    return ret;\n  };\n\n  getBaseDir(preferences: preferencesDTO) {\n    let translate = getTranslate(this.props.locale);\n    return (\n      <div key={'preferences_baseDir'} style={{display: 'flex', flex: '1 1 auto', alignItems: 'center'}}>\n        <TextField\n          autoFocus\n          value={preferences.baseDir}\n          label={translate('PREFERENCES.BASE_DIRECTORY')}\n          onChange={this.updateBaseDir}\n        />\n        <Tooltip\n          title={this.getTooltipText()}\n\n\n                        PopperProps={{\n                   popperOptions: {\n                     modifiers: {\n                       arrow: {\n                         enabled: Boolean(this.state.arrowRef),\n                         element: this.state.arrowRef,\n                       },\n                     },\n                   },\n                 }}>\n          <IconButton\n            variant={'text'}\n            color={'secondary'}\n            style={{marginLeft: '25px'}}\n          >\n\n            <Info/>\n          </IconButton>\n        </Tooltip>\n      </div>\n    );\n  }\n\n  getTooltipText(){\n    let translate=getTranslate(this.props.locale);\n        return(\n          <React.Fragment>\n            {translate('PREFERENCES.TOOLTIP_BASE_DIR')}\n            <span className={classes.arrow} ref={this.handleArrowRef} />\n          </React.Fragment>\n        );\n  }\n\n  handleArrowRef = node => {\n    this.setState({\n      arrowRef: node,\n    });\n  };\n\n  getActions() {\n    let translate = getTranslate(this.props.locale);\n    return [\n      <Button\n        key={'closeButton'}\n        variant=\"contained\"\n        color=\"secondary\"\n        onClick={this.handleCloseDialog}>\n        {translate('CLOSE')}\n      </Button>\n    ];\n  }\n\n  getTitle() {\n    return getTranslate(this.props.locale)('MENU.PREFERENCES')\n  }\n\n\n  /******************************************************/\n  /*Fixed part of the dialog, don't touch that          */\n  /******************************************************/\n  handleCloseDialog = () => {\n    this.props.dispatch(dialogActions.closeDialog());\n  };\n\n  render() {\n    let dialog = this.props.dialog;\n    return (\n      <Dialog open={dialog.open}>\n        <DialogTitle id={dialog.dialogTitle}>{this.getTitle()}</DialogTitle>\n        <DialogContent>\n          {this.getContent()}\n        </DialogContent>\n        <DialogActions>\n          {this.getActions()}\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nexport default connect(store => {\n  return {\n    dialog: store.dialog,\n    locale: store.locale,\n    preferences: store.preferences,\n  };\n})(templateClassName);\n\n"]},"metadata":{},"sourceType":"module"}