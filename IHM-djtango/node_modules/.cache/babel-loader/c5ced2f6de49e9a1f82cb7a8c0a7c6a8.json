{"ast":null,"code":"import _classCallCheck from \"/home/hoonakker/Dropbox/dvt/projet-JAVASCRIPT/react-tutos/dj-tango-js/IHM/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hoonakker/Dropbox/dvt/projet-JAVASCRIPT/react-tutos/dj-tango-js/IHM/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/hoonakker/Dropbox/dvt/projet-JAVASCRIPT/react-tutos/dj-tango-js/IHM/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/hoonakker/Dropbox/dvt/projet-JAVASCRIPT/react-tutos/dj-tango-js/IHM/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/hoonakker/Dropbox/dvt/projet-JAVASCRIPT/react-tutos/dj-tango-js/IHM/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/hoonakker/Dropbox/dvt/projet-JAVASCRIPT/react-tutos/dj-tango-js/IHM/src/components/dialogs/preferences-dialog.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport * as dialogActions from \"../../redux/actions/dialogActions\";\nimport * as preferencesActions from \"../../redux/actions/preferencesActions\";\nimport Button from \"@material-ui/core/Button\";\nimport { getTranslate } from '../locales/localeUtils';\nimport TextField from \"@material-ui/core/TextField\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Info from \"@material-ui/icons/Info\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nvar styles = {\n  input: {\n    opacity: \"0\",\n    width: \"0px\",\n    height: \"0px\"\n  },\n  selectFileBloc: {\n    display: 'flex',\n    flex: '1 1 auto',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: '15px'\n  },\n  arrow: {\n    position: 'absolute',\n    fontSize: 6,\n    width: '3em',\n    height: '3em',\n    '&::before': {\n      content: '\"\"',\n      margin: 'auto',\n      display: 'block',\n      width: 0,\n      height: 0,\n      borderStyle: 'solid'\n    }\n  }\n};\n\nvar templateClassName =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(templateClassName, _Component);\n\n  function templateClassName(props) {\n    var _this;\n\n    _classCallCheck(this, templateClassName);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(templateClassName).call(this, props));\n\n    _this.handleBaseDirChange = function (event) {\n      _this.updateStatePreferencesField('baseDir', event.target.value);\n    };\n\n    _this.handleLanguageChange = function (event) {\n      console.log(\"In language change\");\n      console.log(event.target.value);\n\n      _this.updateStatePreferencesField('language', event.target.value);\n\n      setTimeout(function () {\n        _this.updatePreferencesInDB();\n      }, 500);\n    };\n\n    _this.updatePreferencesInDB = function () {\n      var preferences = _this.state.preferences;\n\n      _this.props.dispatch(preferencesActions.updatePreferencesInDB(preferences));\n    };\n\n    _this.handleCloseDialog = function () {\n      _this.props.dispatch(dialogActions.closeDialog());\n    };\n\n    _this.state = {\n      preferences: props.preferences\n    };\n    return _this;\n  }\n\n  _createClass(templateClassName, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      if (this.props.preferences !== this.state.preferences) {\n        this.setState({\n          preferences: this.props.preferences\n        });\n      }\n    }\n  }, {\n    key: \"getContent\",\n    value: function getContent() {\n      var ret = [];\n      ret.push(this.getBaseDir());\n      ret.push(this.getLanguage());\n      ret.push(this.getTimeCortinaAndFadeOut());\n      return ret;\n    }\n  }, {\n    key: \"getBaseDir\",\n    value: function getBaseDir() {\n      var translate = getTranslate(this.props.locale);\n      return React.createElement(\"div\", {\n        key: 'preferences_baseDir',\n        style: {\n          display: 'flex',\n          flex: '1 1 auto',\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        autoFocus: true,\n        value: this.state.preferences.baseDir,\n        label: translate('PREFERENCES.BASE_DIRECTORY'),\n        onChange: this.handleBaseDirChange,\n        onBlur: this.updatePreferencesInDB,\n        style: {\n          width: '450px',\n          margin: '15px 0'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }), React.createElement(Tooltip, {\n        title: translate('PREFERENCES.TOOLTIP_BASE_DIR'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        variant: 'text',\n        color: 'secondary',\n        style: {\n          marginLeft: '25px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(Info, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }))));\n    }\n  }, {\n    key: \"getLanguage\",\n    value: function getLanguage() {\n      var translate = getTranslate(this.props.locale);\n      var formControl = {\n        margin: '15px',\n        minWidth: '120px'\n      };\n      return React.createElement(FormControl, {\n        style: formControl,\n        key: 'SelectLanguageInPreferences',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(InputLabel, {\n        htmlFor: \"language\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, translate('LANGUAGE')), React.createElement(Select, {\n        value: this.state.preferences.language,\n        onChange: this.handleLanguageChange,\n        inputProps: {\n          name: 'language',\n          id: 'language'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(MenuItem, {\n        value: 'en-en',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, translate('ENGLISH')), React.createElement(MenuItem, {\n        value: 'fr-fr',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, translate('FRENCH'))));\n    }\n  }, {\n    key: \"updateStatePreferencesField\",\n    value: function updateStatePreferencesField(field, value) {\n      var preferences = this.state.preferences;\n      preferences[field] = value;\n      console.log(preferences);\n      this.setState({\n        preferences: preferences\n      });\n    }\n  }, {\n    key: \"getActions\",\n    value: function getActions() {\n      var translate = getTranslate(this.props.locale);\n      return [React.createElement(Button, {\n        key: 'closeButton',\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: this.handleCloseDialog,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, translate('CLOSE'))];\n    }\n  }, {\n    key: \"getTitle\",\n    value: function getTitle() {\n      return getTranslate(this.props.locale)('MENU.PREFERENCES');\n    }\n    /******************************************************/\n\n    /*Fixed part of the dialog, don't touch that          */\n\n    /******************************************************/\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var dialog = this.props.dialog;\n      return React.createElement(Dialog, {\n        open: dialog.open,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(DialogTitle, {\n        id: dialog.dialogTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, this.getTitle()), React.createElement(DialogContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, this.getContent()), React.createElement(DialogActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, this.getActions()));\n    }\n  }]);\n\n  return templateClassName;\n}(Component);\n\nexport default connect(function (store) {\n  return {\n    dialog: store.dialog,\n    locale: store.locale,\n    preferences: store.preferences\n  };\n})(templateClassName);","map":{"version":3,"sources":["/home/hoonakker/Dropbox/dvt/projet-JAVASCRIPT/react-tutos/dj-tango-js/IHM/src/components/dialogs/preferences-dialog.js"],"names":["React","Component","connect","Dialog","DialogActions","DialogContent","DialogTitle","dialogActions","preferencesActions","Button","getTranslate","TextField","IconButton","Info","Tooltip","FormControl","InputLabel","Select","MenuItem","styles","input","opacity","width","height","selectFileBloc","display","flex","justifyContent","alignItems","marginTop","arrow","position","fontSize","content","margin","borderStyle","templateClassName","props","handleBaseDirChange","event","updateStatePreferencesField","target","value","handleLanguageChange","console","log","setTimeout","updatePreferencesInDB","preferences","state","dispatch","handleCloseDialog","closeDialog","prevProps","prevState","snapshot","setState","ret","push","getBaseDir","getLanguage","getTimeCortinaAndFadeOut","translate","locale","baseDir","marginLeft","formControl","minWidth","language","name","id","field","dialog","open","dialogTitle","getTitle","getContent","getActions","store"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport * as dialogActions from \"../../redux/actions/dialogActions\";\nimport * as preferencesActions from \"../../redux/actions/preferencesActions\";\nimport Button from \"@material-ui/core/Button\";\nimport {getTranslate} from '../locales/localeUtils';\nimport TextField from \"@material-ui/core/TextField\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Info from \"@material-ui/icons/Info\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nconst styles = {\n  input: {\n    opacity: \"0\",\n    width: \"0px\",\n    height: \"0px\"\n  },\n  selectFileBloc: {\n    display: 'flex',\n    flex: '1 1 auto',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: '15px',\n  },\n  arrow: {\n    position: 'absolute',\n    fontSize: 6,\n    width: '3em',\n    height: '3em',\n    '&::before': {\n      content: '\"\"',\n      margin: 'auto',\n      display: 'block',\n      width: 0,\n      height: 0,\n      borderStyle: 'solid',\n    },\n  },\n};\n\nclass templateClassName extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      preferences: props.preferences,\n    };\n  }\n\n  componentDidUpdate(prevProps: Readonly<P>, prevState: Readonly<S>, snapshot: SS): void {\n    if (this.props.preferences !== this.state.preferences) {\n      this.setState({preferences: this.props.preferences})\n    }\n  }\n\n  getContent() {\n    let ret = [];\n\n    ret.push(this.getBaseDir());\n    ret.push(this.getLanguage());\n    ret.push(this.getTimeCortinaAndFadeOut());\n    return ret;\n  };\n\n  getBaseDir() {\n    let translate = getTranslate(this.props.locale);\n    return (\n      <div key={'preferences_baseDir'} style={{display: 'flex', flex: '1 1 auto', alignItems: 'center'}}>\n        <TextField\n          autoFocus\n          value={this.state.preferences.baseDir}\n          label={translate('PREFERENCES.BASE_DIRECTORY')}\n          onChange={this.handleBaseDirChange}\n          onBlur={this.updatePreferencesInDB}\n          style={{width: '450px', margin: '15px 0'}}\n        />\n        <Tooltip title={translate('PREFERENCES.TOOLTIP_BASE_DIR')}>\n          <IconButton\n            variant={'text'}\n            color={'secondary'}\n            style={{marginLeft: '25px'}}\n          >\n\n            <Info/>\n          </IconButton>\n        </Tooltip>\n      </div>\n    );\n  }\n\n  handleBaseDirChange = event => {\n    this.updateStatePreferencesField('baseDir', event.target.value);\n  };\n\n  getLanguage() {\n    let translate = getTranslate(this.props.locale);\n    let formControl = {\n      margin: '15px',\n      minWidth: '120px',\n    };\n    return (\n      <FormControl style={formControl} key={'SelectLanguageInPreferences'}>\n        <InputLabel htmlFor=\"language\">{translate('LANGUAGE')}</InputLabel>\n        <Select\n          value={this.state.preferences.language}\n          onChange={this.handleLanguageChange}\n          inputProps={{\n            name: 'language',\n            id: 'language',\n          }}\n        >\n          <MenuItem value={'en-en'}>{translate('ENGLISH')}</MenuItem>\n          <MenuItem value={'fr-fr'}>{translate('FRENCH')}</MenuItem>\n        </Select>\n      </FormControl>\n    )\n  }\n\n  handleLanguageChange = event => {\n    console.log(\"In language change\");\n    console.log(event.target.value);\n    this.updateStatePreferencesField('language', event.target.value);\n    setTimeout(() => {\n      this.updatePreferencesInDB()\n    }, 500);\n  };\n\n  updateStatePreferencesField(field, value) {\n    let preferences: preferencesDTO = this.state.preferences;\n    preferences[field] = value;\n    console.log(preferences);\n    this.setState({preferences});\n  }\n\n  updatePreferencesInDB = () => {\n    let preferences = this.state.preferences;\n    this.props.dispatch(preferencesActions.updatePreferencesInDB(preferences));\n  };\n\n  getActions() {\n    let translate = getTranslate(this.props.locale);\n    return [\n      <Button\n        key={'closeButton'}\n        variant=\"contained\"\n        color=\"secondary\"\n        onClick={this.handleCloseDialog}>\n        {translate('CLOSE')}\n      </Button>\n    ];\n  }\n\n  getTitle() {\n    return getTranslate(this.props.locale)('MENU.PREFERENCES')\n  }\n\n\n  /******************************************************/\n  /*Fixed part of the dialog, don't touch that          */\n  /******************************************************/\n  handleCloseDialog = () => {\n    this.props.dispatch(dialogActions.closeDialog());\n  };\n\n  render() {\n    let dialog = this.props.dialog;\n    return (\n      <Dialog open={dialog.open}>\n        <DialogTitle id={dialog.dialogTitle}>{this.getTitle()}</DialogTitle>\n        <DialogContent>\n          {this.getContent()}\n        </DialogContent>\n        <DialogActions>\n          {this.getActions()}\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nexport default connect(store => {\n  return {\n    dialog: store.dialog,\n    locale: store.locale,\n    preferences: store.preferences,\n  };\n})(templateClassName);\n\n"]},"metadata":{},"sourceType":"module"}