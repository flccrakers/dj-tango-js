{"ast":null,"code":"import moment from \"moment/moment\";\nvar currentServerBasePath = 'http://localhost:6767'; // noinspection JSAnnotator\n\nexport function postJSON(url, bodyPayload, queryPayload) {\n  var finalUrl = composeUrl(url, queryPayload);\n  return fetch(currentServerBasePath + finalUrl, {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(bodyPayload)\n  }).then(function (response) {\n    var contentType = response.headers.get(\"content-type\");\n\n    if (contentType && contentType.includes(\"application/json\")) {\n      return response.json();\n    }\n\n    throw new TypeError(\"Oops, we haven't got JSON!\");\n  }).then(function (response) {\n    if (response.hasOwnProperty('IsSuccess')) {\n      // Probably a NXResultContainer\n      if (response.IsSuccess === true) {\n        return response.Payload;\n      } else {\n        throw new Error(response.GeneralException);\n      }\n    } else return response;\n  });\n}\nexport function composeUrl(baseUrl, queryPayload) {\n  var finalUrl = baseUrl;\n\n  if (queryPayload != null) {\n    if (!finalUrl.endsWith(\"?\")) finalUrl = finalUrl + \"?\";\n    finalUrl = Object.keys(queryPayload).reduce(function (currentUrl, key) {\n      var value = queryPayload[key];\n\n      if (Array.isArray(value)) {\n        value.forEach(function (cell) {\n          currentUrl = currentUrl + \"\".concat(key, \"=\").concat(encodeURIComponent(cell), \"&\");\n        });\n      } else if (value instanceof Date) {\n        currentUrl = currentUrl + \"\".concat(key, \"=\").concat(encodeURIComponent(moment(value).local().format('MM/DD/YYYY HH:mm:ss.SSS')), \"&\");\n      } else {\n        currentUrl = currentUrl + \"\".concat(key, \"=\").concat(encodeURIComponent(value), \"&\");\n      }\n\n      return currentUrl;\n    }, finalUrl);\n  }\n\n  return finalUrl;\n}\nexport function getJSON(baseUrl, queryPayload) {\n  var finalUrl = composeUrl(baseUrl, queryPayload); // console.log(currentServerBasePath +finalUrl);\n\n  return fetch(currentServerBasePath + finalUrl, {\n    method: 'GET',\n    // credentials: 'include',\n    headers: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    }\n  }).then(function (response) {\n    //console.log(response.headers.get(\"content-type\"));\n    var contentType = response.headers.get(\"content-type\");\n\n    if (contentType && contentType.includes(\"application/json\")) {\n      return response.json();\n    }\n\n    throw new TypeError(\"Oops, we haven't got JSON!\");\n  }).then(function (response) {\n    if (response.hasOwnProperty('IsSuccess')) {\n      // Probably a NXResultContainer\n      if (response.IsSuccess === true) {\n        return response.Payload;\n      } else {\n        throw new Error(response.GeneralException);\n      }\n    } else return response;\n  });\n}\nexport function getSongFile(baseUrl, queryPayload) {\n  var finalUrl = baseUrl + queryPayload;\n  console.log(finalUrl);\n  return fetch(currentServerBasePath + finalUrl, {\n    method: 'GET',\n    credentials: 'include',\n    headers: {\n      'Accept': '*/*',\n      'Content-Type': 'audio/mpeg'\n    }\n  }).then(function (response) {\n    console.log(response);\n    var blob = response.blob();\n    return response.url;\n  });\n}","map":{"version":3,"sources":["/home/hoonakker/Dropbox/dvt/projet-JAVASCRIPT/react-tutos/dj-tango-js/IHM/src/services/serviceBase.js"],"names":["moment","currentServerBasePath","postJSON","url","bodyPayload","queryPayload","finalUrl","composeUrl","fetch","method","credentials","headers","body","JSON","stringify","then","response","contentType","get","includes","json","TypeError","hasOwnProperty","IsSuccess","Payload","Error","GeneralException","baseUrl","endsWith","Object","keys","reduce","currentUrl","key","value","Array","isArray","forEach","cell","encodeURIComponent","Date","local","format","getJSON","getSongFile","console","log","blob"],"mappings":"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","sourcesContent":["import moment from \"moment/moment\";\nlet currentServerBasePath = 'http://localhost:6767';\n\n// noinspection JSAnnotator\nexport function postJSON(url: string, bodyPayload: any, queryPayload?:any) {\n  let finalUrl = composeUrl(url, queryPayload);\n  return fetch(currentServerBasePath + finalUrl, {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(bodyPayload)\n  }).then(function (response) {\n    let contentType = response.headers.get(\"content-type\");\n    if (contentType && contentType.includes(\"application/json\")) {\n      return response.json();\n    }\n    throw new TypeError(\"Oops, we haven't got JSON!\");\n  }).then((response: IJSONWrapper) => {\n    if (response.hasOwnProperty('IsSuccess')) {\n      // Probably a NXResultContainer\n      if (response.IsSuccess === true) {\n        return response.Payload;\n      } else {\n        throw new Error(response.GeneralException);\n      }\n    }\n    else return response;\n  });\n}\n\nexport function composeUrl(baseUrl: string, queryPayload?:any) : string{\n  let finalUrl = baseUrl;\n  if (queryPayload != null) {\n    if(!finalUrl.endsWith(\"?\"))\n      finalUrl = finalUrl+\"?\";\n\n    finalUrl = Object.keys(queryPayload).reduce((currentUrl, key)=>{\n      let value = queryPayload[key];\n\n      if(Array.isArray(value)){\n        value.forEach((cell)=>{\n          currentUrl= currentUrl+`${key}=${encodeURIComponent(cell)}&`;\n        });\n      }\n      else if(value instanceof Date){\n        currentUrl =currentUrl+`${key}=${encodeURIComponent(moment(value).local().format('MM/DD/YYYY HH:mm:ss.SSS'))}&`;\n\n      }\n      else{\n        currentUrl =currentUrl+`${key}=${encodeURIComponent(value)}&`;\n      }\n      return currentUrl;\n    }, finalUrl)\n  }\n  return finalUrl\n}\n\nexport function getJSON(baseUrl:string, queryPayload?: any) {\n  let finalUrl = composeUrl(baseUrl, queryPayload);\n  // console.log(currentServerBasePath +finalUrl);\n\n  return fetch(currentServerBasePath + finalUrl, {\n    method: 'GET',\n    // credentials: 'include',\n    headers: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    },\n  }).then(function (response) {\n    //console.log(response.headers.get(\"content-type\"));\n    const contentType = response.headers.get(\"content-type\");\n    if (contentType && contentType.includes(\"application/json\")) {\n      return response.json();\n    }\n    throw new TypeError(\"Oops, we haven't got JSON!\");\n  }).then((response) => {\n    if (response.hasOwnProperty('IsSuccess')) {\n      // Probably a NXResultContainer\n      if (response.IsSuccess === true) {\n        return response.Payload;\n      } else {\n        throw new Error(response.GeneralException);\n      }\n    }\n    else return response;\n  })\n}\n\nexport function getSongFile(baseUrl:string, queryPayload?: any){\n  let finalUrl = baseUrl+ queryPayload;\n  console.log(finalUrl);\n  return fetch(currentServerBasePath + finalUrl,{\n    method:'GET',\n    credentials:'include',\n    headers:{\n      'Accept': '*/*',\n      'Content-Type': 'audio/mpeg'\n    },\n  }).then(function(response){\n    console.log(response);\n    let blob = response.blob();\n    return response.url;\n  })\n}\n"]},"metadata":{},"sourceType":"module"}