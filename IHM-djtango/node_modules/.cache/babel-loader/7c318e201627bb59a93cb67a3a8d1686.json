{"ast":null,"code":"import * as tangoDataManagement from '../../services/tangoDataManagement';\n\nfunction updateTango(payload) {\n  return {\n    type: 'UPDATE_CURRENT_TANGO',\n    payload: payload\n  };\n}\n\nexport function updateCurrentTango(tango) {\n  return function (dispatch) {\n    tangoDataManagement.getTangoFile(tango._id).then(function (tangoFile) {\n      var payload = {\n        tango: tango,\n        song: tangoFile\n      }; // console.log(payload);\n\n      dispatch(updatePause(false));\n      dispatch(updateTango(payload));\n    }).catch(function (error) {\n      console.error(error);\n      dispatch(updatePause(true));\n    });\n  };\n}\n/**\n * Store the progress of the current tango\n * @param value in milliseconds\n */\n\nexport function progress(value) {\n  return {\n    type: 'PROGRESS',\n    payload: value\n  };\n}\n/*export function storePlayerEl(element) {\n  return {\n    type: 'STORE_PLAYER',\n    payload: element,\n  }\n}*/\n\n/*export function play(){\n  this.getState().playerEl.play();\n}*/\n\n/*export function stop(player, duration){\n  // return (dispatch, getState) => {\n    let state = getState().player;\n    console.log(state);\n    plalyer.pause();\n    // state.playerEl.currentTime = state.currentTango.duration / 1000;\n    return{type:'DO_NOTHING'}\n    // this.rap.audioEl.currentTime=this.props.playerData.currentTango.duration/1000;\n  // }\n\n}*/\n\nexport function updateVolume(newValue) {\n  if (newValue < 0) newValue = 0;\n  return {\n    type: 'UPDATE_VOLUME',\n    payload: newValue\n  };\n}\nexport function saveAudioEl(audioEl) {\n  return {\n    type: 'SAVE_AUDIO_ELEMENT',\n    payload: audioEl\n  };\n}\nexport function updatePause(value) {\n  return {\n    type: 'UPDATE_PAUSE',\n    payload: value\n  };\n}","map":{"version":3,"sources":["/home/hoonakker/Dropbox/dvt/projet-JAVASCRIPT/react-tutos/dj-tango-js/IHM/src/redux/actions/playerActions.js"],"names":["tangoDataManagement","updateTango","payload","type","updateCurrentTango","tango","dispatch","getTangoFile","_id","then","tangoFile","song","updatePause","catch","error","console","progress","value","updateVolume","newValue","saveAudioEl","audioEl"],"mappings":"AAAA,OAAO,KAAKA,mBAAZ,MAAqC,oCAArC;;AAGA,SAASC,WAAT,CAAqBC,OAArB,EAA8B;AAC5B,SAAO;AACLC,IAAAA,IAAI,EAAE,sBADD;AAELD,IAAAA,OAAO,EAAPA;AAFK,GAAP;AAKD;;AAED,OAAO,SAASE,kBAAT,CAA4BC,KAA5B,EAAmC;AACxC,SAAO,UAAUC,QAAV,EAAoB;AACzBN,IAAAA,mBAAmB,CAACO,YAApB,CAAiCF,KAAK,CAACG,GAAvC,EAA4CC,IAA5C,CAAiD,UAAAC,SAAS,EAAI;AAE5D,UAAIR,OAAO,GAAG;AACZG,QAAAA,KAAK,EAAEA,KADK;AAEZM,QAAAA,IAAI,EAAED;AAFM,OAAd,CAF4D,CAM5D;;AACAJ,MAAAA,QAAQ,CAACM,WAAW,CAAC,KAAD,CAAZ,CAAR;AACAN,MAAAA,QAAQ,CAACL,WAAW,CAACC,OAAD,CAAZ,CAAR;AAED,KAVD,EAUGW,KAVH,CAUS,UAAAC,KAAK,EAAI;AAChBC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACAR,MAAAA,QAAQ,CAACM,WAAW,CAAC,IAAD,CAAZ,CAAR;AACD,KAbD;AAcD,GAfD;AAiBD;AAED;;;;;AAIA,OAAO,SAASI,QAAT,CAAkBC,KAAlB,EAAyB;AAE9B,SAAO;AACLd,IAAAA,IAAI,EAAE,UADD;AAELD,IAAAA,OAAO,EAAEe;AAFJ,GAAP;AAKD;AAED;;;;;;;AAOA;;;;AAIA;;;;;;;;;;;;AAYA,OAAO,SAASC,YAAT,CAAsBC,QAAtB,EAAgC;AACrC,MAAIA,QAAQ,GAAG,CAAf,EAAkBA,QAAQ,GAAG,CAAX;AAClB,SAAO;AACLhB,IAAAA,IAAI,EAAE,eADD;AAELD,IAAAA,OAAO,EAAEiB;AAFJ,GAAP;AAKD;AAED,OAAO,SAASC,WAAT,CAAqBC,OAArB,EAA8B;AACnC,SAAO;AACLlB,IAAAA,IAAI,EAAE,oBADD;AAELD,IAAAA,OAAO,EAAEmB;AAFJ,GAAP;AAID;AAED,OAAO,SAAST,WAAT,CAAqBK,KAArB,EAA4B;AACjC,SAAO;AACLd,IAAAA,IAAI,EAAE,cADD;AAELD,IAAAA,OAAO,EAAEe;AAFJ,GAAP;AAID","sourcesContent":["import * as tangoDataManagement from '../../services/tangoDataManagement';\n\n\nfunction updateTango(payload) {\n  return {\n    type: 'UPDATE_CURRENT_TANGO',\n    payload,\n  }\n\n}\n\nexport function updateCurrentTango(tango) {\n  return function (dispatch) {\n    tangoDataManagement.getTangoFile(tango._id).then(tangoFile => {\n\n      let payload = {\n        tango: tango,\n        song: tangoFile,\n      };\n      // console.log(payload);\n      dispatch(updatePause(false));\n      dispatch(updateTango(payload));\n\n    }).catch(error => {\n      console.error(error);\n      dispatch(updatePause(true));\n    });\n  }\n\n}\n\n/**\n * Store the progress of the current tango\n * @param value in milliseconds\n */\nexport function progress(value) {\n\n  return {\n    type: 'PROGRESS',\n    payload: value\n  }\n\n}\n\n/*export function storePlayerEl(element) {\n  return {\n    type: 'STORE_PLAYER',\n    payload: element,\n  }\n}*/\n\n/*export function play(){\n  this.getState().playerEl.play();\n}*/\n\n/*export function stop(player, duration){\n  // return (dispatch, getState) => {\n    let state = getState().player;\n    console.log(state);\n    plalyer.pause();\n    // state.playerEl.currentTime = state.currentTango.duration / 1000;\n    return{type:'DO_NOTHING'}\n    // this.rap.audioEl.currentTime=this.props.playerData.currentTango.duration/1000;\n  // }\n\n}*/\n\nexport function updateVolume(newValue) {\n  if (newValue < 0) newValue = 0;\n  return {\n    type: 'UPDATE_VOLUME',\n    payload: newValue,\n  }\n\n}\n\nexport function saveAudioEl(audioEl) {\n  return {\n    type: 'SAVE_AUDIO_ELEMENT',\n    payload: audioEl,\n  }\n}\n\nexport function updatePause(value) {\n  return {\n    type: 'UPDATE_PAUSE',\n    payload: value,\n  }\n}"]},"metadata":{},"sourceType":"module"}